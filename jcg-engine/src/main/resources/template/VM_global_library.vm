#**
* @author <a href="kayvanfar.sj@gmail.com">Saeed Kayvanfar</a> on 5/27/2106.
*#
## todo must move to other macro library
## ############################################################################ Hibernate Handler START

## Define id name
#macro(idName $id)
## private ${id.type} ${id.name};
#end

## Define id setters and getters
#macro(idGetterAndSetterEntity $id)
    @Id
    @GeneratedValue(strategy = GenerationType.#idGeneratorTypeHibernate($id.idGeneratorType))
    @Column(name = "${id.columnName}", unique = ${id.unique}, nullable = ${id.nullable})
    @Override
    #idGetterAndSetter($id)
#end

#########################################################
#macro(idGetterAndSetter $id)
    #set($capitalizeName = ${id.name.substring(0, 1).toUpperCase()}+${id.name.substring(1)})   ## capitalize of property.name
    public ${id.type} get${capitalizeName}() {
        return ${id.name};
    }

    public void set${capitalizeName}(${id.type} ${id.name}) {
        this.${id.name} = ${id.name};
    }
#end

## Define properties name
#macro(propertiesNameEntity $properties)
    #foreach(${property} in ${properties})
        #propertyName($property)
    #end
#end

#########################################################
#macro(propertyName $property)
    private ${property.type} ${property.name};
#end

## Define properties setters and getters
#macro(propertiesGetterAndSetterEntity $properties)
    #foreach(${property} in ${properties})
        @Basic
        @Column(name = "${property.columnName}", unique = ${property.unique}, nullable = ${property.nullable})
        #propertyGetterAndSetter($property)
    #end
#end

#########################################################
#macro(propertyGetterAndSetter $property)
    #set($capitalizeName = ${property.name.substring(0, 1).toUpperCase()}+${property.name.substring(1)})   ## capitalize of property.name
    public ${property.type} get${capitalizeName}() {
        return ${property.name};
    }

    public void set${capitalizeName}(${property.type} ${property.name}) {
        this.${property.name} = ${property.name};
    }
#end

## Define relationships name
#macro(relationshipsNameEntity $relationships)
    #foreach(${relationship} in ${relationships})
        #relationshipName($relationship)
    #end
#end

#########################################################
#macro(relationshipName $relationship)
    private #if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end${relationship.targetEntity.name}#if($relationship.collectionType != "Nothing")>#end ${relationship.name} = new #relationshipcollectionTypeImpl($relationship.collectionType)<>();
#end

## Define relationships setters and getters
#macro(relationshipsGetterAndSetterEntity $relationships)
    #foreach(${relationship} in ${entity.relationships})
        #relationshipCardinalityTypeHibernate($relationship.cardinalityType)
        #if((!${relationship.head} && ${relationship.cardinalityType} != "* ... 1") || (${relationship.directionalityType} == "Bidirectional") && ${relationship.cardinalityType} == "1 ... *")(mappedBy = "${relationship.otherSideRelationship.name}")#end
        #if(${relationship.directionalityType} == "Unidirectional" && (${relationship.cardinalityType} != "1 ... 1" || ${relationship.cardinalityType} != "1 ... *"))
            @JoinColumn(name = "${entity.name}_id")
        #end
        #relationshipGetterAndSetter($relationship)
    #end
#end

#########################################################
#macro(relationshipGetterAndSetter $relationship)
    #set($capitalizeName = ${relationship.name.substring(0, 1).toUpperCase()}+${relationship.name.substring(1)})   ## capitalize of relation.name
    public #if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end${relationship.targetEntity.name}#if($relationship.collectionType != "Nothing")>#end get${capitalizeName}() {
        return ${relationship.name};
    }

    public void set${capitalizeName}(#if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end${relationship.targetEntity.name}#if($relationship.collectionType != "Nothing")>#end ${relationship.name}) {
        this.${relationship.name} = ${relationship.name};
    }
#end

## Define  collectionTypeImpl for collectionType
#macro(relationshipcollectionTypeImpl $collectionType)
    #if(${collectionType} == "List")
    ArrayList
    #elseif(${collectionType} == "Set")
    HashSet
    #elseif(${collectionType} == "Collection")
    ArrayList
    #end
#end

## Define relationship cardinalityType for hibernate
#macro(relationshipCardinalityTypeHibernate $cardinalityType)
    #if(${cardinalityType} == "1 ... 1")
        @OneToOne(fetch = FetchType.EAGER)
    #elseif(${cardinalityType} == "1 ... *")
        @OneToMany(fetch = FetchType.EAGER)
    #elseif(${cardinalityType} == "* ... 1")
        @ManyToOne(fetch = FetchType.EAGER)
    #elseif(${cardinalityType} == "* ... *")
        @ManyToMany
    #end
#end

## Define id generator type for hibernate todo must change
#macro(idGeneratorTypeHibernate $cardinalityType)
    #if(${cardinalityType} == "Auto")
        AUTO
    #elseif(${cardinalityType} == "Manual")

    #elseif(${cardinalityType} == "Incremental")
        SEQUENCE
    #elseif(${cardinalityType} == "Native")
        TABLE
    #end
#end

## ############################################################################ Hibernate Handler END

## ############################################################################ View START
## Define properties name
#macro(viewComponents $components $view)
    #set($Integer = 0)
    #set($realSpan = 12/$Integer.parseInt($view.span))   ## Calculate real span
    #foreach(${component} in ${components})
    <div class="column small-${realSpan} medium-${realSpan} large-${realSpan}">
        #set($call = "#${component.class.simpleName}")
        #evaluate($call)
    </div>
    #end
#end

## Components

## Define TextField component
#macro(TextField $component $view)
    <form:text path="${component.targetEntityElement.name}" placeholder="${component.targetEntityElement.labelName}" label="${component.targetEntityElement.labelName}" maxlength="${component.maxLength}"/>
#end

## Define TextArea component
#macro(TextArea $component $view)
<form:textarea path="${component.targetEntityElement.name}" placeholder="${component.targetEntityElement.labelName}" label="${component.targetEntityElement.labelName}"/>
#end

## Define PasswordTextField component
#macro(PasswordTextField $component $view)
<form:password path="${component.targetEntityElement.name}" placeholder="${component.targetEntityElement.labelName}" label="${component.targetEntityElement.labelName}"/>
#end

## Define PasswordTextField component
#macro(Tag $component $view)
#set($entityName = ${view.targetEntity.name}) ## name
#set($lowerCaseEntityName = ${entityName.substring(0, 1).toLowerCase()}+${entityName.substring(1)})   ## lowerCase of entity name
#set($lowerCaseViewFileName = ${view.viewFileName.substring(0, 1).toLowerCase()}+${view.viewFileName.substring(1)})   ## lowerCase of view file name
<form:tag path="${component.targetEntityElement.name}" #*maxCount="1"*# placeholder="${component.targetEntityElement.labelName}" label="${component.targetEntityElement.labelName}" filterUrl="/${lowerCaseEntityName}/${lowerCaseViewFileName}/filter/${component.targetEntityElement.name}"/>
#end

## Define Label component
#macro(Label $component $view)
#set($lowerCaseEntityName = ${view.targetEntity.name.substring(0, 1).toLowerCase()}+${view.targetEntity.name.substring(1)})   ## lowerCase of entity name
<form:label path="${component.targetEntityElement.name}" label="${component.targetEntityElement.labelName}" content="${${lowerCaseEntityName}.${component.targetEntityElement.name}}"/>
#end

## Define Link component
#macro(Link $component $view)
    #set($lowerCaseEntityName = ${view.targetEntity.name.substring(0, 1).toLowerCase()}+${view.targetEntity.name.substring(1)})   ## lowerCase of entity name
    #set($lowerCaseViewFileName = ${component.targetView.getViewFileName().substring(0, 1).toLowerCase()}+${component.targetView.getViewFileName().substring(1)})
    #if(${component.targetEntityElement.class.simpleName} == "Id")

        #if(${component.targetView.class.simpleName} == "DisplayView")
            #set($linkType = "/display")
        #elseif(${component.targetView.class.simpleName} == "CreateEditView")
            #set($linkType = "/edit")
        #end
        #set($url = "/" + ${lowerCaseEntityName} + "/" + ${lowerCaseViewFileName} + ${linkType})   ## lowerCase of targetView file name
        #set($idQuery = ${lowerCaseEntityName})
    #elseif(${component.targetEntityElement.class.simpleName} == "Relationship")
        #set($url = "/" + ${component.targetView.getTargetEntity().getName().toLowerCase()} + "/" + ${lowerCaseViewFileName} + "/display")   ## lowerCase of targetView file name
        #set($idQuery = ${component.targetEntityElement.name})
    #end

<form:link name="${component.targetView.name}" url="${url}" idQuery="${${idQuery}.id}" cssClass="button-vertical-align"/>
#end

## DataGrid headers
#macro(dataGridHeaders $dataGrid)
<tr class="my-panel-header">
        <th>ردیف</th>
    #foreach(${component} in ${dataGrid.components})
        <th>${component.targetEntityElement.labelName}</th>
    #end
    <th></th>
</tr>
#end

## DataGrid Contents
#macro(dataGridContents $view)
#set($entityName = ${view.targetEntity.name}) ## name
#set($lowerCaseViewFileName = ${view.viewFileName.substring(0, 1).toLowerCase()}+${view.viewFileName.substring(1)})   ## lowerCase of view file name
#set($lowerCaseEntityName = ${entityName.substring(0, 1).toLowerCase()}+${entityName.substring(1)})   ## lowerCase of entity name
<c:forEach var="${lowerCaseEntityName}" items="${${lowerCaseEntityName}s.data}" varStatus="forIndex">
    <tr>
        <td>${${lowerCaseEntityName}s.page * ${lowerCaseEntityName}s.pageSize + forIndex.index + 1}</td>
        #foreach(${component} in ${view.dataGrid.components})
            #set($call = "#${component.class.simpleName}")
            <td>#evaluate($call)</td>
        #end

        <td>
            <div>
                <a href="<filter:hashLongUrl url="/manage/artist" name="id" value="${${lowerCaseEntityName}.${lowerCaseEntityName}Id}" />"
                class="alert round button button-vertical-align">
                حذف
                </a>
            </div>
        </td>
    </tr>
</c:forEach>
#end


## Define Data properties name
#macro(dataPropertiesName $components)
    #foreach(${component} in ${components})
        #if(${component.targetEntityElement.class.simpleName} == "Property")
            #set($property = ${component.targetEntityElement})
            @SearchParam
            #propertyName($property)
        #elseif(${component.targetEntityElement.class.simpleName} == "Relationship")
            #set($relationship = ${component.targetEntityElement})
            @SearchParam
            #suggestionDataRelationshipName($relationship)
        #end
    #end
#end

##############################################################
#macro(suggestionDataRelationshipName $relationships)
    private #if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end#[[HashedLongSuggestionData]]##if($relationship.collectionType != "Nothing")>#end ${relationship.name} = new #relationshipcollectionTypeImpl($relationship.collectionType)<>();
#end

## Define Data properties setters and getters
#macro(dataPropertiesGetterAndSetter $components)
    #foreach(${component} in ${components})
        #if(${component.targetEntityElement.class.simpleName} == "Property")
            #set($property = ${component.targetEntityElement})
            #propertyGetterAndSetter($property)
        #elseif(${component.targetEntityElement.class.simpleName} == "Relationship")
            #set($relationship = ${component.targetEntityElement})
            @Valid
            #suggestionDataRelationshipGetterAndSetter($relationship)
            #suggestionDataRelationshipGetterIds($relationship)
        #end
    #end
#end

##############################################################
#macro(suggestionDataRelationshipGetterAndSetter $relationship)
    #set($capitalizeName = ${relationship.name.substring(0, 1).toUpperCase()}+${relationship.name.substring(1)})   ## capitalize of relation.name
    public #if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end HashedLongSuggestionData #if($relationship.collectionType != "Nothing")>#end get${capitalizeName}() {
        return ${relationship.name};
    }

    public void set${capitalizeName}(#if(${relationship.collectionType} != "Nothing")${relationship.collectionType}<#end HashedLongSuggestionData #if($relationship.collectionType != "Nothing")>#end ${relationship.name}) {
        this.${relationship.name} = ${relationship.name};
    }
#end

#macro(suggestionDataRelationshipGetterIds $relationship)
    #set($capitalizeName = ${relationship.name.substring(0, 1).toUpperCase()}+${relationship.name.substring(1)})   ## capitalize of relation.name
    public Long[] get${capitalizeName}Id() {
        final List<Long> l = new ArrayList<>();
        if (${relationship.name} != null)
            for (HashedLongSuggestionData t : ${relationship.name})
                if (t != null && t.getId() != null)
                    l.add(t.getId());
        return l.toArray(new Long[l.size()]);
    }
#end

## ############################################################################ Hibernate Handler END